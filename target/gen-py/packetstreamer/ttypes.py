#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class OFMessageType:
  """
  OFMessage type

  """
  HELLO = 0
  ERROR = 1
  ECHO_REQUEST = 2
  ECHO_REPLY = 3
  VENDOR = 4
  FEATURES_REQUEST = 5
  FEATURES_REPLY = 6
  GET_CONFIG_REQUEST = 7
  GET_CONFIG_REPLY = 8
  SET_CONFIG = 9
  PACKET_IN = 10
  FLOW_REMOVED = 11
  PORT_STATUS = 12
  PACKET_OUT = 13
  FLOW_MOD = 14
  PORT_MOD = 15
  STATS_REQUEST = 16
  STATS_REPLY = 17
  BARRIER_REQUEST = 18
  BARRIER_REPLY = 19

  _VALUES_TO_NAMES = {
    0: "HELLO",
    1: "ERROR",
    2: "ECHO_REQUEST",
    3: "ECHO_REPLY",
    4: "VENDOR",
    5: "FEATURES_REQUEST",
    6: "FEATURES_REPLY",
    7: "GET_CONFIG_REQUEST",
    8: "GET_CONFIG_REPLY",
    9: "SET_CONFIG",
    10: "PACKET_IN",
    11: "FLOW_REMOVED",
    12: "PORT_STATUS",
    13: "PACKET_OUT",
    14: "FLOW_MOD",
    15: "PORT_MOD",
    16: "STATS_REQUEST",
    17: "STATS_REPLY",
    18: "BARRIER_REQUEST",
    19: "BARRIER_REPLY",
  }

  _NAMES_TO_VALUES = {
    "HELLO": 0,
    "ERROR": 1,
    "ECHO_REQUEST": 2,
    "ECHO_REPLY": 3,
    "VENDOR": 4,
    "FEATURES_REQUEST": 5,
    "FEATURES_REPLY": 6,
    "GET_CONFIG_REQUEST": 7,
    "GET_CONFIG_REPLY": 8,
    "SET_CONFIG": 9,
    "PACKET_IN": 10,
    "FLOW_REMOVED": 11,
    "PORT_STATUS": 12,
    "PACKET_OUT": 13,
    "FLOW_MOD": 14,
    "PORT_MOD": 15,
    "STATS_REQUEST": 16,
    "STATS_REPLY": 17,
    "BARRIER_REQUEST": 18,
    "BARRIER_REPLY": 19,
  }


class SwitchPortTuple:
  """
  A struct that defines switch port tuple

  Attributes:
   - dpid
   - port
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'dpid', None, None, ), # 1
    (2, TType.I16, 'port', None, None, ), # 2
  )

  def __init__(self, dpid=None, port=None,):
    self.dpid = dpid
    self.port = port

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.dpid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.port = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SwitchPortTuple')
    if self.dpid is not None:
      oprot.writeFieldBegin('dpid', TType.I64, 1)
      oprot.writeI64(self.dpid)
      oprot.writeFieldEnd()
    if self.port is not None:
      oprot.writeFieldBegin('port', TType.I16, 2)
      oprot.writeI16(self.port)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Packet:
  """
  Attributes:
   - messageType
   - swPortTuple
   - data
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'messageType', None, None, ), # 1
    (2, TType.STRUCT, 'swPortTuple', (SwitchPortTuple, SwitchPortTuple.thrift_spec), None, ), # 2
    (3, TType.STRING, 'data', None, None, ), # 3
  )

  def __init__(self, messageType=None, swPortTuple=None, data=None,):
    self.messageType = messageType
    self.swPortTuple = swPortTuple
    self.data = data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.messageType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.swPortTuple = SwitchPortTuple()
          self.swPortTuple.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.data = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Packet')
    if self.messageType is not None:
      oprot.writeFieldBegin('messageType', TType.I32, 1)
      oprot.writeI32(self.messageType)
      oprot.writeFieldEnd()
    if self.swPortTuple is not None:
      oprot.writeFieldBegin('swPortTuple', TType.STRUCT, 2)
      self.swPortTuple.write(oprot)
      oprot.writeFieldEnd()
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.STRING, 3)
      oprot.writeString(self.data)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Message:
  """
  Attributes:
   - sessionIDs
   - packet
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'sessionIDs', (TType.STRING,None), None, ), # 1
    (2, TType.STRUCT, 'packet', (Packet, Packet.thrift_spec), None, ), # 2
  )

  def __init__(self, sessionIDs=None, packet=None,):
    self.sessionIDs = sessionIDs
    self.packet = packet

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.sessionIDs = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.sessionIDs.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.packet = Packet()
          self.packet.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Message')
    if self.sessionIDs is not None:
      oprot.writeFieldBegin('sessionIDs', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.sessionIDs))
      for iter6 in self.sessionIDs:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.packet is not None:
      oprot.writeFieldBegin('packet', TType.STRUCT, 2)
      self.packet.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
